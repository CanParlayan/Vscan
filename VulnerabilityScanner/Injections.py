import requests
from bs4 import BeautifulSoup as bs
from abc import abstractmethod


class Injections:

    def __init__(self, quiet):
        self.quiet = quiet

    @staticmethod
    def get_all_forms_html(url):
        """
        Retrieve all HTML forms from a given URL
        Args:
            url: URL to site
        Returns: All forms present on the page
        """
        # Retrieve HTML content from the URL
        req = requests.get(url).content
        # Parse HTML content using BeautifulSoup
        soup = bs(req, 'html.parser')
        # Find all form tags in the HTML
        return soup.find_all('form')

    @staticmethod
    def get_form_details(form):
        """
        Extract and return details of a given form
        Returns: Action, method, and inputs of the given form
        """
        details_form = {"inputs": []}  # Dictionary for action, method, and input
        # Get action and method attributes from the form tag
        details_form["action"] = form.attrs.get('action', '').lower()
        details_form["method"] = form.attrs.get('method', 'get').lower()

        # Handle input, textarea, and select tags
        for tag in form.find_all(["input", "textarea", "select"]):
            input_type = tag.attrs.get("type", "text")
            input_name = tag.attrs.get("name")
            input_value = tag.attrs.get("value", "") if input_type != "select" else ""

            # Handle textarea tags separately
            if input_type == "textarea":
                input_value = tag.get_text()

            # Handle select tags and assume first option selected if no 'selected' attribute present
            if input_type == "select":
                options = tag.find_all("option")
                selected_value = next((option.attrs.get("value", "") for option in options if 'selected' in option.attrs), "")
                if not selected_value and options:
                    selected_value = options[0].attrs.get("value", "")
                input_value = selected_value

            details_form["inputs"].append({"type": input_type, "name": input_name, "value": input_value})

        return details_form

    @abstractmethod
    def scan_host(self, *args, **kwargs):
        pass

