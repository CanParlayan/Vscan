import os
import pprint
from urllib.parse import urljoin

import requests
from fake_headers import Headers

from VulnerabilityScanner.Injector import Injections
from VulnerabilityScanner.src.terminalColors import TerminalColors


class XssScanner(Injections):

    def __init__(self, quiet, url, vulnerabilities_tracker):
        super().__init__(quiet)
        self.url = url
        self.quiet = quiet
        self.vulnerabilities_tracker = vulnerabilities_tracker
        self.header = Headers(headers=True)
        self.ses = requests.Session()

    def scan_host(self, report, xsspayload):
        if not self.quiet:
            print(f"{TerminalColors.HEADER}[*] Checking for XSS vulnerabilities{TerminalColors.ENDC}")

        forms = self.get_all_forms_html(self.url)
        report.write_to_report("\n Number of detected forms in URL: " + str(len(forms)) + "\n")

        payloadfile = "./payloads/xss_payloads.txt" if not xsspayload else xsspayload
        if os.path.isfile(payloadfile):
            with open(payloadfile, "r", encoding="utf-8") as f:
                payloads = f.readlines()
        else:
            print(f"{TerminalColors.FAIL}Payload file does not exist.{TerminalColors.ENDC}")
            return
        print(f"{TerminalColors.OKBLUE}Please be patient while the scanner is running...{TerminalColors.ENDC}")

        for form in forms:
            f_details = self.get_form_details(form)
            for script in payloads:
                script = script.strip()
                form_data = self.prepare_form_data(f_details, script)
                response = self.submit_form(f_details['action'], f_details['method'], form_data)

                if script in response.content.decode():
                    unique_id = (f_details['action'], tuple(detail['name'] for detail in f_details['inputs']))

                    if unique_id not in self.vulnerabilities_tracker:
                        self.vulnerabilities_tracker.add(unique_id)
                        xss_details_url = None
                        if not self.quiet:
                            print(f"{TerminalColors.WARNING}[-] Found XSS vulnerability{TerminalColors.ENDC}")
                            xss_details_url = self.get_full_url(f_details['action'])
                            print(f"{TerminalColors.OKBLUE}Link: {xss_details_url}{TerminalColors.ENDC}")
                            print(f"{TerminalColors.OKBLUE}XSS Details -> {f_details['action']}{TerminalColors.ENDC}")
                            print(f"{TerminalColors.OKBLUE}Vulnerable component(s):{TerminalColors.ENDC}")
                            for input_element in f_details['inputs']:
                                if input_element['type'] in ('text', 'textarea'):
                                    print(
                                        f"{TerminalColors.OKGREEN}    - Input field: {input_element['name']}"
                                        f"{TerminalColors.ENDC}")
                                elif input_element['type'] == 'submit':
                                    print(
                                        f"{TerminalColors.OKGREEN}    - Submit button: {input_element['name']}"
                                        f"{TerminalColors.ENDC}")

                        if xss_details_url is not None:
                            report.write_to_report(
                                f"\n{TerminalColors.WARNING}[Vulnerability] Found XSS vulnerability in form! "
                                f":{xss_details_url}\n{TerminalColors.ENDC}")
                            report.write_to_report(pprint.pformat(f_details))
        print(f"{TerminalColors.OKGREEN}Scan completed{TerminalColors.ENDC}")
        self.close_session()

    def get_full_url(self, path):

        return urljoin(self.url, path if path else self.url)

    @staticmethod
    def prepare_form_data(f_details, script):

        form_data = {}
        for input_element in f_details['inputs']:

            input_value = input_element.get('value', '')

            if input_element['type'] in ('text', 'textarea'):
                input_value = script
            elif input_element['type'] == 'submit':
                input_value = input_element.get('value', '')

            form_data[input_element['name']] = input_value

        return form_data

    def submit_form(self, action_url, method, form_data):

        url = urljoin(self.url, action_url if action_url else self.url)

        with requests.Session() as ses:
            if method == "post":
                response = ses.post(url, data=form_data, headers=self.header.generate())
            else:
                response = ses.get(url, params=form_data, headers=self.header.generate())

        return response

    def close_session(self):

        self.ses.close()
