import os
import requests
from fake_headers import Headers
from VulnerabilityScanner.components.forminjector import Injections
from VulnerabilityScanner.components.terminalColors import TerminalColors


def is_xss_vulnerable(response, script):
    return script in response.text


def load_payloads(payloadfile):
    with open(payloadfile, "r", encoding="utf-8") as f:
        return [line.strip() for line in f.readlines()]


class XssScanner(Injections):
    def __init__(self, quiet, url, vulnerabilities_tracker):
        super().__init__(quiet)
        self.url = url
        self.quiet = quiet
        self.vulnerabilities_tracker = vulnerabilities_tracker
        self.header = Headers(headers=True)
        self.ses = requests.Session()

    def scan_host(self, report, xsspayload):
        payloadfile = "./payloads/xss_payloads.txt" if not xsspayload else xsspayload
        if not os.path.isfile(payloadfile):
            print(f"{TerminalColors.FAIL}Payload file does not exist.{TerminalColors.ENDC}")
            return

        print(f"{TerminalColors.OKBLUE}Please be patient while the scanner is running...{TerminalColors.ENDC}")

        forms = self.get_all_forms_html(self.url)
        print(f"Found {len(forms)} form(s) on {self.url}")

        for form in forms:
            f_details = self.get_form_details(form)
            print(f"Processing form: {f_details}")

            payloads = load_payloads(payloadfile)

            for script in payloads:
                script = script.strip()
                form_data = self.prepare_form_data(f_details, script)
                print(f"Prepared form data for script '{script}': {form_data}")

                response = self.submit_form(f_details['action'], f_details['method'], form_data)
                if response:
                    print(f"Form submitted to {f_details['action']} with method {f_details['method']}")
                    if is_xss_vulnerable(response, script):
                        print(f"XSS vulnerability detected with script '{script}'")
                        self.handle_vulnerability(report, f_details, script)
                        break
                else:
                    print(f"Failed to submit form to {f_details['action']}")
        self.close_session()
        print("XSS scanning completed")

    def handle_vulnerability(self, report, f_details, script):
        unique_id = (f_details['action'], tuple(detail['name'] for detail in f_details['inputs']))
        if unique_id not in self.vulnerabilities_tracker:
            self.vulnerabilities_tracker.add(unique_id)
            xss_details_url = self.get_full_url(f_details['action'])
            xss_vulnerability = {
                "url": xss_details_url,
                "details": f_details,
                "payload": script
            }
            report.add_xss_vulnerability(xss_vulnerability)
            if not self.quiet:
                print(f"{TerminalColors.WARNING}[-] Found XSS vulnerability{TerminalColors.ENDC}")
                print(f"{TerminalColors.OKBLUE}Link: {xss_details_url}{TerminalColors.ENDC}")
                print(f"{TerminalColors.OKBLUE}XSS Details -> {f_details['action']}{TerminalColors.ENDC}")
                print(f"{TerminalColors.OKBLUE}Vulnerable component(s):{TerminalColors.ENDC}")
                for input_element in f_details['inputs']:
                    if input_element['type'] in ('text', 'textarea'):
                        print(
                            f"{TerminalColors.OKGREEN}    - Input field: {input_element['name']}{TerminalColors.ENDC}")
                    elif input_element['type'] == 'submit':
                        print(
                            f"{TerminalColors.OKGREEN}    - Submit button: {input_element['name']}"
                            f"{TerminalColors.ENDC}")
