    from urllib.parse import urljoin
import requests
from bs4 import BeautifulSoup as BeautifulSoup
from abc import abstractmethod


class Injections:

    def __init__(self, quiet):
        self.quiet = quiet
        self.header = None
        self.ses = None
        self.url = None

    @staticmethod
    def get_all_forms_html(url):
        req = requests.get(url).content
        soup = BeautifulSoup(req, 'html.parser')
        return soup.find_all('form')

    @staticmethod
    def get_form_details(form):
        details_form = {"inputs": [], "action": form.attrs.get('action', '').lower(),
                        "method": form.attrs.get('method', 'get').lower()}

        for tag in form.find_all(["input", "textarea", "select"]):
            input_type = tag.attrs.get("type", "text")
            input_name = tag.attrs.get("name")
            input_value = tag.attrs.get("value", "") if input_type != "select" else ""

            if input_type == "textarea":
                input_value = tag.get_text()

            if input_type == "select":
                options = tag.find_all("option")
                selected_value = next(
                    (option.attrs.get("value", "") for option in options if 'selected' in option.attrs), "")
                if not selected_value and options:
                    selected_value = options[0].attrs.get("value", "")
                input_value = selected_value

            details_form["inputs"].append({"type": input_type, "name": input_name, "value": input_value})

        return details_form

    def get_full_url(self, path):
        return urljoin(self.url, path if path else self.url)

    def prepare_form_data(self, f_details, script):
        form_data = {}
        for input_element in f_details['inputs']:
            if input_element['type'] in ('text', 'textarea'):
                input_value = script
            elif input_element['type'] == 'submit':
                input_value = input_element.get('value', '')
            else:
                input_value = input_element.get('value', '')

            form_data[input_element['name']] = input_value

        return form_data

    def submit_form(self, action_url, method, form_data):
        url = urljoin(self.url, action_url if action_url else self.url)

        if method == "post":
            response = self.ses.post(url, data=form_data, headers=self.header.generate())
        else:
            response = self.ses.get(url, params=form_data, headers=self.header.generate())

        return response

    def close_session(self):
        if self.ses:
            self.ses.close()

    @abstractmethod
    def scan_host(self, report, xsspayload):
        pass
