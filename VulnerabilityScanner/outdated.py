import os
import re
from urllib.parse import urljoin

import requests
from bs4 import BeautifulSoup

from VulnerabilityScanner.components.terminalColors import TerminalColors


def get_current_js_version(component_url):
    try:
        response = requests.get(component_url)
        if response.status_code == 200:
            version_pattern = re.compile(r"\d+\.\d+\.\d+")
            match = version_pattern.search(response.text)
            if match:
                return match.group()
            else:
                return None
        else:
            print(f"{TerminalColors.FAIL}Error: Unable to fetch version. Status code:"
                  f" {response.status_code}{TerminalColors.ENDC}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"{TerminalColors.FAIL}Error fetching version: {e}{TerminalColors.ENDC}")
        return None


def process_component_name(component_url):
    try:
        filename = component_url.split('/')[-1]
        component_name = re.split(r'[-.\s]', filename)[0]
        return component_name
    except Exception as e:
        print(f"{TerminalColors.FAIL}Error processing component name for URL {component_url}: {e}{TerminalColors.ENDC}")
        return None


class Outdated:
    def __init__(self, website_domain):
        self.website_domain = website_domain
        self.components = []
        self.already_checked = []
        self.component_names = {}
        self.component_versions = {}
        self.cve_info = {}
        self.api_key = os.getenv("API_KEY")

    def get_page_source(self):
        try:
            if not self.website_domain.startswith(('http://', 'https://')):
                self.website_domain = 'http://' + self.website_domain

            response = requests.get(self.website_domain)
            if response.status_code == 200:
                return response.text
            else:
                print(f"{TerminalColors.FAIL}Error: Unable to fetch page source. Status code: "
                      f"{response.status_code}{TerminalColors.ENDC}")
                return None
        except Exception as e:
            print(f"{TerminalColors.FAIL}Error: {e}{TerminalColors.ENDC}")
            return None

    def find_components(self, page_source):
        soup = BeautifulSoup(page_source, 'html.parser')
        scripts = soup.find_all('script')
        links = soup.find_all('link')

        for script in scripts:
            src = script.get('components')
            if src and (src.endswith('.js') or src.endswith('.css')):
                if not src.startswith(('http://', 'https://')):
                    src = urljoin(self.website_domain, src)
                self.components.append(src)

        for link in links:
            href = link.get('href')
            if href and (href.endswith('.js') or href.endswith('.css')):
                if not href.startswith(('http://', 'https://')):
                    href = urljoin(self.website_domain, href)
                self.components.append(href)

    def get_js_package_version(self, package_name):
        try:
            package_name = package_name.split('-')[0].split('.')[0]
            request_url = f"https://unpkg.com/{package_name}@latest/package.json"
            response = requests.get(request_url)
            if response.status_code == 200:
                package_info = response.json()
                component_name = package_info.get('title') or package_name
                latest_version = package_info.get('version')
                if latest_version is None:
                    return None

                if component_name in self.already_checked:
                    return None
                else:
                    self.already_checked.append(component_name)
                    self.component_names[package_name] = component_name
                    return latest_version
            else:
                return None
        except Exception as e:
            print(f"{TerminalColors.FAIL}Error while checking version for package {package_name}:"
                  f" {e}{TerminalColors.ENDC}")
            return None

    def check_component_versions(self):
        for component in self.components:
            try:
                component_name = process_component_name(component)
                if component_name is None:
                    continue

                latest_version = self.get_js_package_version(component_name)
                if latest_version is not None:
                    current_version = get_current_js_version(component)
                    if current_version:
                        if current_version != latest_version:
                            status = "outdated"
                        else:
                            status = "up to date"
                        self.component_versions[component_name] = {
                            'current_version': current_version,
                            'latest_version': latest_version,
                            'status': status
                        }
            except Exception as e:
                print(f"{TerminalColors.FAIL}Error checking component {component}: {e}{TerminalColors.ENDC}")

    def run_tests(self, report):
        page_source = self.get_page_source()
        if page_source:
            self.find_components(page_source)
            self.check_component_versions()
            print(f"{TerminalColors.OKBLUE}Detected Components:{TerminalColors.ENDC}")
            for component, info in self.component_versions.items():
                print(f"Component: {component}")
                print(f"Current Version: {info['current_version']}")
                print(f"Latest Version: {info['latest_version']}")
                print(f"Status: The current version is {info['status']}.")
                print()
            self.check_for_cve()
            self.generate_report(report)

    def generate_report(self, report):
        if not self.component_versions:

            report_data = {"Detected Components": "No components detected"}
        else:
            outdated_components = {}

            for component, info in self.component_versions.items():
                component_details = {
                    "Current Version": info['current_version'],
                    "Latest Version": info['latest_version'],
                    "Status": f"The current version is {info['status']}."
                }
                outdated_components[component] = component_details

            report_data = {"Detected Components": outdated_components}

        report.write_outdated(report_data, audit_type="outdated")

    def format_cve_info(self):
        formatted_cve_info = []

        for component, cve_info in self.cve_info.items():
            if cve_info:
                cve_info_str = f"Component: {component}\n"
                for cve_id, summary in cve_info.items():
                    cve_info_str += (
                        f"  CVE ID: {cve_id}\n"
                        f"  Summary: {summary}\n"
                    )
                formatted_cve_info.append(cve_info_str)
            else:
                formatted_cve_info.append(f"No CVEs found for {component}.\n")

        return "\n".join(formatted_cve_info)

    def check_for_cve(self):

        for component, info in self.component_versions.items():
            print(f"Checking for CVEs related to {component} version {info['current_version']}...")
            cve_url = f"https://api.cvesearch.com/search?q={component}%20{info['current_version']}"
            cve_response = requests.get(cve_url, headers={'X-Api-Key': self.api_key})

            if cve_response.status_code == 200:
                cve_data = cve_response.json()
                print(cve_data)

                if cve_data['totalResults'] > 0:
                    print(f"Found CVE(s) for {component}:")
                    for result in cve_data['results']:
                        print(result['id'], result['summary'])
                else:
                    print(f"No CVEs found for {component}.")
            else:
                print(
                    f"Error fetching CVE information for {component}: {cve_response.status_code}")
        else:
            print("No CVEs found for this component version.")
