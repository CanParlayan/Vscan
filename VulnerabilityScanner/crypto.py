import subprocess
import re
import os
from urllib.parse import urlparse
from dotenv import load_dotenv

def testConnection(url, report):
    try:
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname

        load_dotenv()

        nmap_path = os.getenv("NMAP_PATH")
        if nmap_path and os.path.exists(nmap_path):
            # Encapsulate nmap_path in quotes to handle spaces in the path
            nmap_command = f'"{nmap_path}" --script ssl-cert,ssl-enum-ciphers -v -p 443 {hostname}'
            print(f"Executing command: {nmap_command}")

            result = subprocess.run(nmap_command, shell=True, capture_output=True, text=True)

            if result.returncode != 0:
                print(f"Command execution failed with return code {result.returncode}")
                print(f"Command output: {result.stderr}")
                return  # Exit function if command execution failed

            output_lines = result.stdout.split('\n')
            ciphers = []
            ssl_cert_info = []

            for line in output_lines:
                if "Issuer: commonName" in line:
                    issuer = line.strip().split("=")[1].split("/")[0]
                    ssl_cert_info.append(issuer)
                elif "Not valid after:" in line:
                    not_valid_after = line.strip().split(": ")[1].strip()
                    ssl_cert_info.append(not_valid_after)
                else:
                    match = re.match(r"\| +([A-Za-z0-9_]+) \(([\w\s]+)\) - ([A-F])", line)
                    if match:
                        cipher_name = match.group(1)
                        strength = match.group(3)
                        if strength != 'A':
                            ciphers.append((cipher_name, strength))

            print("Ciphers found:", ciphers)
            print("SSL Cert Info:", ssl_cert_info)

            # Write results to report
            report.write_to_crypto(ciphers, ssl_cert_info)
        else:
            print("NMAP_PATH environment variable not set or invalid")
    except Exception as e:
        print(f"Error occurred during connection test: {e}")

