import os
import signal
import time
from urllib.parse import urlparse, urlunparse, parse_qs, urlencode

from VulnerabilityScanner.components.errors import check as check_sql_errors
from VulnerabilityScanner.components import getter


def init():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


def load_payloads_from_file(file_path):
    with open(file_path, 'r') as file:
        payloads = [line.strip() for line in file if line.strip()]
    return payloads


def scan(url, payload_dir=None):
    is_vulnerable, payload, vulnerable_url, vuln_type, response = scan_url(url, payload_dir)

    if is_vulnerable:
        response_text = response.decode('utf-8') if isinstance(response, bytes) else response
        if check_sql_errors(response_text):
            print("Vulnerability Found:")
            print(f"URL: {vulnerable_url}")
            print(f"Payload: {payload}")
            print(f"Type: {vuln_type}")
            print("SQL found in response.")
            print()
            return {
                "URL": vulnerable_url,
                "Payload": payload,
                "Type": vuln_type,
                "SQL": True
            }
        else:
            print("Vulnerability Found:")
            print(f"URL: {vulnerable_url}")
            print(f"Payload: {payload}")
            print(f"Type: {vuln_type}")
            print("No SQL found in response.")
            print()
            return {
                "URL": vulnerable_url,
                "Payload": payload,
                "Type": vuln_type,
                "SQL": False
            }
    else:
        print("No vulnerabilities found.")
        print()
        return None


def inject_payload(url, payload):
    parsed_url = urlparse(url)
    if parsed_url.query:
        updated_query = parse_qs(parsed_url.query)
        for key in updated_query.keys():
            updated_query[key] = [payload]
        new_query = urlencode(updated_query, doseq=True)
        new_parsed_url = parsed_url._replace(query=new_query)
        return urlunparse(new_parsed_url)
    else:
        return url + '?' + urlencode([(key, payload) for key in payload])


def scan_url(url, payload_dir=None):
    parsed_url = urlparse(url)
    domain = parsed_url.scheme + "://" + parsed_url.netloc + parsed_url.path

    if not parsed_url.query:
        return False, None, None, None, None

    error_payload_file = union_payload_file = boolean_payload_file = time_payload_file = None
    if payload_dir:
        error_payload_file = os.path.join(payload_dir, "error_based_payload")
        union_payload_file = os.path.join(payload_dir, "union_based_payload")
        boolean_payload_file = os.path.join(payload_dir, "boolean_based_payload")
        time_payload_file = os.path.join(payload_dir, "time_based_payload")

    error_payloads = load_payloads_from_file(error_payload_file) if error_payload_file and os.path.isfile(
        error_payload_file) else []
    union_payloads = load_payloads_from_file(union_payload_file) if union_payload_file and os.path.isfile(
        union_payload_file) else []
    boolean_payloads = load_payloads_from_file(boolean_payload_file) if boolean_payload_file and os.path.isfile(
        boolean_payload_file) else []
    time_payloads = load_payloads_from_file(time_payload_file) if time_payload_file and os.path.isfile(
        time_payload_file) else []

    is_vulnerable = False
    vulnerable_payload = None
    vulnerable_url = None
    vuln_type = None
    response = None

    for error_payload in error_payloads:
        website = inject_payload(domain, error_payload)
        source = getter.gethtml(website)
        if source:
            is_vulnerable = True
            vulnerable_payload = error_payload
            vulnerable_url = website
            vuln_type = "Error-Based Injection"
            response = source
            break

    if not is_vulnerable:
        for union_payload in union_payloads:
            website = inject_payload(domain, union_payload)
            source = getter.gethtml(website)
            if source:
                is_vulnerable = True
                vulnerable_payload = union_payload
                vulnerable_url = website
                vuln_type = "Union-Based Injection"
                response = source
                break

    if not is_vulnerable:
        for boolean_payload in boolean_payloads:
            website_true = inject_payload(domain, boolean_payload + " AND 1=1")
            response_true = getter.gethtml(website_true)

            website_false = inject_payload(domain, boolean_payload + " AND 1=0")
            response_false = getter.gethtml(website_false)

            if response_true and response_false and response_true != response_false:
                is_vulnerable = True
                vulnerable_payload = boolean_payload
                vulnerable_url = domain
                vuln_type = "Boolean-Based Injection"
                response = response_true
                break

    if not is_vulnerable:
        for time_payload in time_payloads:
            start_time = time.time()
            website = inject_payload(domain, time_payload)
            response = getter.gethtml(website)
            end_time = time.time()

            if response and end_time - start_time >= 10:
                is_vulnerable = True
                vulnerable_payload = time_payload
                vulnerable_url = domain
                vuln_type = "Time-Based Injection"
                break

    return is_vulnerable, vulnerable_payload, vulnerable_url, vuln_type, response
