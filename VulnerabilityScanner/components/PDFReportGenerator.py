import os
import json
from fpdf import FPDF

class PDFReportGenerator:
    def __init__(self, json_report_file):
        with open(json_report_file, "r") as f:
            self.report_data = json.load(f)
        self.filename = os.path.splitext(os.path.basename(json_report_file))[0]  # Get the base filename

    def generate_pdf_report(self):
        pdf = FPDF()
        pdf.set_left_margin(10)
        pdf.set_right_margin(10)
        pdf.add_page()

        #timesnew roman
        pdf.set_font('Times', 'B', 16)
        pdf.cell(0, 10, f'Vulnerability Report for {self.report_data["site_url"]}', 0, 1, 'C')
        pdf.ln(10)

        #url and time
        pdf.set_font('Times', 'B', 12)
        pdf.cell(0, 10, f"Site URL: {self.report_data['site_url']}", 0, 1, 'L')
        pdf.cell(0, 10, f"Time: {self.report_data['timestamp']}", 0, 1, 'L')
        pdf.ln(10)

        #Collected URLs
        pdf.set_font('Times', 'B', 14)
        pdf.cell(0, 10, 'Collected URLs:', 0, 1, 'L')
        pdf.set_font('Times', '', 12)
        for url in self.report_data["Collected URLs"]:
            pdf.multi_cell(0, 10, url)
        pdf.ln(10)

        #Audit Details
        pdf.set_font('Times', 'B', 14)
        pdf.cell(0, 10, 'Audit Details:', 0, 1, 'L')
        pdf.set_font('Times', '', 12)
        pdf.ln(5)

        for audit_type, details in self.report_data["Audit Details"].items():
            #for each audit details a bot
            pdf.set_fill_color(230, 230, 230) #color gray
            pdf.set_font('Times', 'B', 12)
            pdf.cell(0, 10, audit_type.capitalize(), 0, 1, 'L', fill=True)
            pdf.set_font('Times', '', 12)
            pdf.ln(2)

            if isinstance(details, dict):
                for url, vulns in details.items():
                    pdf.set_font('Times', 'I', 12)
                    pdf.cell(0, 10, f'URL: {url}', 0, 1, 'L')
                    pdf.set_font('Times', '', 12)
                    for vuln in vulns:
                        pdf.multi_cell(0, 10, f'- {vuln}')
            elif isinstance(details, list):
                if not details:
                    pdf.multi_cell(0, 10, '- No components detected')
                else:
                    for item in details:
                        pdf.multi_cell(0, 10, f'- {item}')

            pdf.ln(5)  #break 5 line

        pdf.output(f'reports/{self.filename}.pdf')