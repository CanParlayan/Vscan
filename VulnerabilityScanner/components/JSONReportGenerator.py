import os
import json
import time

class JSONReportGenerator:
    def __init__(self, given_url):
        self.filename = f"report_{time.strftime('%Y%m%d-%H%M')}"
        self.url = given_url
        self.report_data = {
            "site_url": self.url,
            "timestamp": time.strftime('%Y%m%d-%H%M'),
            "Audit Details": {},
            "Collected URLs": []
        }
        os.makedirs('reports', exist_ok=True)  # Ensure the reports directory exists

    def __create_report(self):
        with open(os.path.join('reports', f"{self.filename}.json"), "w") as f:
            json.dump(self.report_data, f, indent=2)

    def add_collected_urls(self, collected_urls):
        self.report_data["Collected URLs"].extend(collected_urls)

    def write_to_report(self, details, audit_type, url=None):
        if audit_type not in self.report_data["Audit Details"]:
            self.report_data["Audit Details"][audit_type] = {}

        if isinstance(details, list):
            if url:
                self.report_data["Audit Details"][audit_type].setdefault(url, []).extend(details)
            else:
                self.report_data["Audit Details"][audit_type].extend(details)
        elif isinstance(details, str):
            if url:
                self.report_data["Audit Details"][audit_type].setdefault(url, []).append(details)
            else:
                self.report_data["Audit Details"][audit_type].append(details)

        self.__create_report()
        

    def add_xss_vulnerability(self, xss_vulnerability):
        if 'Xss Vulnerabilties' not in self.report_data['Audit Details']:
            self.report_data['Audit Details']['Xss Vulnerabilties'] = []

        existing_vulnerabilities = self.report_data['Audit Details']['Xss Vulnerabilties']
        for existing_vuln in existing_vulnerabilities:
            if (existing_vuln["url"] == xss_vulnerability["url"] and
                    existing_vuln["payload"] == xss_vulnerability["payload"]):
                return

        self.report_data['Audit Details']['Xss Vulnerabilties'].append(xss_vulnerability)
        self.__create_report()
        

    def write_sql_vulnerability(self, url, payload, vulnerability_type):
        vulnerability_details = {
            "URL": url,
            "Payload": payload,
            "Type": vulnerability_type
        }
        self.write_to_report_details(vulnerability_details, audit_type="sqli")

    def write_to_report_details(self, details, audit_type):
        if audit_type not in self.report_data["Audit Details"]:
            self.report_data["Audit Details"][audit_type] = []

        self.report_data["Audit Details"][audit_type].append(details)

        self.__create_report()
        

    def write_outdated(self, details, audit_type):
        if audit_type not in self.report_data["Audit Details"]:
            self.report_data["Audit Details"][audit_type] = {}

        self.report_data["Audit Details"][audit_type] = details

        self.__create_report()
        

    def write_to_crypto(self, ciphers, sslCertInfo):
        if ciphers or sslCertInfo:  # Check if either ciphers or sslCertInfo is not empty
            self.report_data["Audit Details"]["crypto"] = {
                "ciphers": ciphers,
                "sslCertInfo": sslCertInfo
            }

            self.__create_report()
            


    def write_nmap(self, details, audit_type, url=None):
        if audit_type not in self.report_data["Audit Details"]:
            self.report_data["Audit Details"][audit_type] = {}

        if isinstance(details, list):

            if url:
                self.report_data["Audit Details"][audit_type].setdefault(url, []).extend(details)
            else:
                self.report_data["Audit Details"][audit_type].setdefault('details', []).extend(details)
        elif isinstance(details, str):

            if url:
                self.report_data["Audit Details"][audit_type].setdefault(url, []).append(details)
            else:
                self.report_data["Audit Details"][audit_type].setdefault('details', []).append(details)

        self.__create_report()

