'''
import mysql.connector

class Database:
    def __init__(self):
        self.host = 'localhost'
        self.user = 'root'
        self.password = 'Hard.reach.ces?77'
        self.port = '3306'
        self.database_name = 'vulscan_database'
        self.connection = None
        self.cursor = None

    def connect(self):
        try:
            self.connection = mysql.connector.connect(
                host=self.host,
                user=self.user,
                password=self.password,
                database=self.database_name
            )
            print("Bağlantı başarılı")
        except mysql.connector.Error as err:
            print(f"Hata: {err}")

    def create_tables(self):
        tables = [
            """
            CREATE TABLE IF NOT EXISTS vulnerability_scan_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                scan_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                target_url VARCHAR(255) NOT NULL,
                common_ports_check_result TEXT,
                security_headers_result TEXT,
                xss_scan_result TEXT
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS common_ports_check_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                site_url VARCHAR(255),
                timestamp VARCHAR(255),
                port INT,
                state VARCHAR(255),
                service VARCHAR(255)
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS security_headers_check_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                site_url VARCHAR(255),
                timestamp VARCHAR(255),
                header_name VARCHAR(255),
                recommendation TEXT
            )
            """,
            """
            CREATE TABLE IF NOT EXISTS xss_scan_results (
                id INT AUTO_INCREMENT PRIMARY KEY,
                site_url VARCHAR(255),
                timestamp VARCHAR(255),
                form_action VARCHAR(255),
                form_inputs TEXT
            )
            """
        ]
        for table in tables:
            self.execute_query(table)

    def execute_query(self, query, data=None):
        try:
            cursor = self.connection.cursor()
            cursor.execute(query, data)
            self.connection.commit()
            cursor.close()
        except mysql.connector.Error as err:
            print(f"Hata: {err}")

    def insert_data(self, query, data):
        self.execute_query(query, data)

    def insert_data(self, query, data):
        try:
            cursor = self.connection.cursor()
            # Kontrol etmek için önce var olan bir URL sorgula
            check_query = "SELECT * FROM vulnerability_scan_results WHERE target_url = %s"
            cursor.execute(check_query, (data[0],))
            result = cursor.fetchone()
            if result:
                print("Bu URL zaten veritabanında mevcut.")
            else:
                # Eğer URL veritabanında yoksa direkt ekle
                cursor.execute(query, data)
                self.connection.commit()
                print("Veritabanına başarıyla eklendi.")
        except mysql.connector.Error as err:
            print(f"Hata: {err}")

    def close_connection(self):
        if self.connection:
            self.connection.close()
            print("Bağlantı kapatıldı")

            
            '''